<p><b>1.1 Kraven</b><br>Jag valde att fokusera på ansats nummer två som slutprojekt i kursen: 'Du väljer att inte direkt delta i tävlingen, men du använder en eller flera datakällor som publiceras via tävlingen som källa till din webapp.'<br><br><b>Krav 1: Specifikation och datakällor</b><br>Sedan år 2015 är det förbjudet för fritidsbåtsägare att tömma sitt toalettavfall i hav, sjöar och inre vattendrag.<br><br>Min webapp ska vara ett verktyg för fritidsbåtsägare att hitta Sveriges alla fritidsbåtshamnar och kunna se vad varje hamn erbjuder för serviceanläggning. Serviceanläggning kan exempelvis vara tömningsstation för båtens toalettavfall, landtoalett eller påfyllning av färskvatten med mera. I appen ska man även kunna se de kommentarer som andra fritidsbåtsägare har lämnat om hamnen, så att man till exempel kan undvika att åka in till en hamn för tömning bara för att finna att tömningen är ur funktion. Användaren av webappen kan välja att se alla hamnar uppdelat efter kommun i 'Hamnlistan', vilket kan vara bra om användaren sitter hemma och planerar sin båtsemester, eller genom att ge appen tillgång till användarens position och visa närmaste hamnar på en 'Hamnkarta'. Ger användaren inte tillgång till sin position kan hen förstås använda hamnkartan i alla fall.<br><br>Jag använder mig av Transportstyrelsens API 'Fritidsbåtshamnar och tömningsstationer', som jag hittade på Hack for Swedens webbplats. <a href='https://tsopendata.azure-api.net/hamnar/v0.1/'>Länk till API</a>. Ur API:et använder jag mig av Kommun, Hamn, Longitud, Latitud, Serviceanläggningar och Meddelanden. Informationen hämtar jag med mitt bash-script, update-sources.bash, där jag använder mig av en enkel wget som skriver outputen till ett json-dokument, harbour.json, som sparas lokalt på maskinen. Vill man uppdatera informationen är det bara att köra bash-scriptet på nytt, så skrivs den äldre informationen i harbour.json över med den nya. När man kör bash-scriptet i terminalen skrivs det ut om det gick bra eller inte. Min webapp jobbar mot lokala (cachade) datakällor och behöver inte vara beroende av en direktuppkoppling mot tjänsten.<br><br>Jag använder mig också av Leaflet som är ett open-source JavaScript bibliotek som passar bra till att göra mobilvänliga, interaktiva kartor. <a href='http://leafletjs.com/'>Länk dit</a>. För att få tillgång till användarens position har jag använt mig av Leaflets inbyggda Geolocation funktion, locate. Med den blir det lättare för användaren att hitta de fritidsbåtshamnar som ligger närmast ens position.</p><p><b>Krav 2: Arkitektur, dokumentation och manual</b><br>Jag valde att använda mig av jQuery Mobile, då jag känner att jag har bäst koll på det ramverket jämfört med de andra vi har testat på i kursen. De andra ramverken har jag haft större problem med innan och eftersom att min inlämning redan var ganska sen kände jag att jag hellre ville göra något snyggt och bra istället för fult och icke-fungerande. jQuery Mobile har en hel del begränsningar, men passade utmärkt för det projektet jag valde att genomföra.<br><br>- proj/update-sources.bash, hämtar datakällan och js/css-dokument som hör till Leaflet.<br>- proj/index.html, struktur för applikationen.<br>- me/lib/jquery/themes/marine.css, utseende skapat med jQ ThemeRoller.<br>- proj/css/style.css, små ändringar i utseendet, så som padding.<br>- proj/js/main.js, beteende och interaktivitet.<br>- proj/harbour.json, datakällan.<br>- proj/js/harbour.js, datakällan som JavaScript array. Används till Leaflets karttjänst.<br>- proj/img, bilder. Hamnen på förstasidan och ikonerna på kartan.<br><br>Länk till README.md: https://www.student.bth.se/~sokr16/dbwebb-kurser/webapp/me/kmom10/proj/README.md</p><p><b>Krav 3: En webapp</b><br>Appen blev som jag hade tänkt mig och följer specen jag satte upp. Dock fick jag göra en del prioriteringar, så som att man inte hamnar på en specifik hamns subpage i hamnlistan, utan på en subpage för kommunen som listar alla hamnar som ligger i kommunen. På subpagen för kommunen kan man läsa information om hamnarna så som hamnens namn, koordinater, serviceanläggningar och meddelanden från andra båtägare.<br><br>I hamnkartan blev det som jag hade tänkt mig, förutom att man inte kommer till den specifika hamnens subpage när man klickar på den. Istället får användaren se information som hamnens namn, koordinater och serviceanläggningar, vilket räcker gott och väl.<br><br>Appen ser ut på det sättet jag ville och man kan säga att jag nått min fulla ambitionsnivå, förutom att hamnarna inte har egna subpages.<br><br>Vid validering blir det dock en del varningar som jag inte kan göra något åt, då de ligger i filer som tillhör Leaflet. Får även felmeddelande för main.js där 'L is not defined', vilket även det har med Leaflet att göra och inte är något som jag kan göra något åt.<br><br>Jag har testat min app i Firefox, Chrome, Safari och Edge och fått följande resultat:<br>- Appen fungerar felfritt i Firefox i både HTTP, HTTPS och lokalt.<br>- Appen fungerar felfritt i Chrome om man kör HTTPS, men inte lokalt eller i HTTP.<br>- Appen fungerar nästintill felfritt i Safari i både HTTP, HTTPS och lokalt, men Geolocation fungerar inte.<br>- Appen fungerar nästintill felfritt i Edge i både HTTP, HTTPS och lokalt, men Geolocation visar fel position.<br><br>Jag har testat min app i både Android (Motorola Moto G) och iOS (iPhone 5s):<br>- Fungerar i Android, men Geolocation visar fel position i hamnkartan.<br>- Fungerar i iOS, men frågar inte om Geolocation i hamnkartan.<br>Det går att installera appen på hemskärmen i både Android och iOS. Hur man gör står i min README.md-fil.<br><br>Det finns möjligheter att förbättra min lösning. Man kan exempelvis göra en subpage för varje hamn istället för varje kommun. Sen kan man försöka utöka stödet för Geolocation på alla plattformar. Man kan utöka harbour.js som används till Leaflet kartan men koordinater till samtliga hamnar. De hamnar som inte finns med på kartan är de hamnar var latitud och longitud inte fanns med i den datakällan jag använt mig av. Man kan även lägga till olika features som vädret till havs i real-tid.</p><p><b>Krav 4: Design, layout, användbarhet</b><br>Egen design gjord med hjälp av Themeroller.jquerymobile.com. En layout som gör det lättare att navigera i appen, då det finns både en sidomeny och footermeny.<br><br>Min app är lätt att förstå och användarvänlig. I hamnlistan kan man antingen scrolla bland de kommuner som har fritidsbåtshamnar eller söka på den kommun vars hamnar man är intresserad av. I hamnkartan görs det största jobbet åt en om man väljer att dela med sig av sin position. Då kan man lättare och snabbare hitta en hamn som har de serviceanläggningar man är ute efter. Här slipper man att söka själv.<br><br>År 2015 blev det förbjudet för fritidsbåtsägare att tömma sitt toalettavfall i hav, sjöar och inre vattendrag. Genom min app blir det lättare för fritidsbåtsägaren att hitta lämplig hamn att lägga till vid och tömma toalettavfallet. Bra för miljön, bra för fritidsbåtsägaren som slipper straff. En win-win situation.</p><p><b>Krav 5: Externa bibliotek och modifiering av källa</b><br>Jag använder mig av Leaflet som är ett open-source JavaScript bibliotek som passar bra till att göra mobilvänliga, interaktiva kartor. <a href='http://leafletjs.com/'>Länk dit</a>. För att få tillgång till användarens position har jag använt mig av Leaflets inbyggda Geolocation funktion, locate. Med den blir det lättare för användaren att hitta de fritidsbåtshamnar som ligger närmast ens position.<br><br>Att inkorporera en fungerande Leaflet/OpenStreetMap tog en hel dag, då tilesen inte ville lägga sig där de skulle och läsas in på rätt sätt. Jag fick läsa och kolla på många tutorials innan jag fick till en fungerande lösning. När den lösningen var på plats kraschade appen på grund av att det var alltför många punkter som skulle läsas in samtidigt. Efter ganska mycket googlande hittade jag lösningen markerClusterGroup, som gjorde att allt gick mycket snabbare och blev mer översiktligt.<br><br>Det tog lång tid att få till ett dokument (harbour.js) som gick att använda för att sätta ut punkter på kartan med rätt koordinater. harbour.json fungerade inte, trots att de är nästintill identiska i sitt utformande. harbour.js är en array med 2310 objekt.</p><p><b>1.2 Allmänt om projektet</b><br>Mycket om hur projektet gick att genomföra har jag redan nämnt i ovanstående text. Det har varit tungt i vissa fall. Den datakälla (API) jag valde att arbeta med var väldigt svårarbetad. Inte indexerad på något sätt, utan bara objekt efter objekt i en lång radda. Det tog lång tid innan jag kom underfund med hur jag skulle få ut rätt värden, då exempelvis 'Serviceanläggningar' var ett objekt med en array av objekt som också behövde loopas igenom. Det blev många lösningar där jag fick spara undan värdena i arrayer och sedan med pageId indexera fram rätt kommun, antal hamnar i den kommunen och namnet på hamnarna i kommunen.<br><br>Kartan var också svår att få att fungera felfritt. Något man kan läsa om i stycket under rubriken 'Krav 5: ...'.<br><br>Det var ganska lätt att komma på en idé då jag scrollade igenom de källor som fanns på Hack for Sweden. Mina föräldrar tycker båda om att segla och det ser så bökigt ut med alla kartor och GPS:er det drar med sig överallt och försöker hitta en hamn att gå in i. I dem fallen är min webapp bra att ha, då man antingen knappar in en intressant hamns koordinater i sin GPS eller försöker navigera via den något bristfälliga Geolocation och hamnkartan.<br><br>Projektet har allt som allt tagit ganska lång tid för mig, men samtidigt inte så lång tid som jag befarade från början. Det gick lätt att sätta upp en struktur för appen och att fixa utseendet med hjälp av ThemeRoller. Svårare med kartan och bearbetning av datakällan. Men jag är helt klart nöjd med min insats!<br><br>Det känns som ett bra och rimligt projekt för denna kursen, så länge man har fantasin med sig.</p><p><b>1.3 Tankar om kursen</b><br>Övningar, instruktioner och inlämningsuppgifter har känts relevanta. Jag har läst en del i 'Mobile HTML5' och tyckt att den har fungerat bra som kurslitteratur, åtminstone för mig som har jobbat med HTML innan. Handledning har jag fått när jag har postat i forumet och det har fungerat bra. Jag har fått svar när jag har fastnat och kunnat lösa de problem som uppstår ganska smärtfritt. Det har varit kul att få testa på flera olika ramverk, men jag har ännu inte riktigt fått en favorit bland de vi har testat. Cordova är nog det ramverk jag tyckt minst om då det var så himla mycket uppdelning av innehåll och kod, men jag ser helt klart fördelar med att jobba på det sättet. Det krävs nog bara att man vänjer sig lite mer.<br><br>Som i övriga kurser i kurspaketet har det varit sparsmakad feedback på inlämningarna, vilket jag förstår då det är många studenter vars arbeten man ska kolla, men ibland hade det varit kul med lite utförligare feedback. Vad hade jag kunnat göra för att förbättra mina appar, till exempel.<br><br>Allt som allt är jag nöjd med kursen och att jag har klarat mig igenom den. Det ska bli kul att skapa fler webappar på egen hand framöver. Jag skulle rekommendera kursen till vänner och familj som vill ha en introduktion till webappar och framför allt vill lära sig att utveckla en webapp snabbt (med jQm). Jag ger kursen en åtta i betyg!</p>
